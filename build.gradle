plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation 'com.google.guava:guava:31.1-jre'
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	// https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
implementation 'com.mysql:mysql-connector-j:8.1.0'
	
}

tasks.named('test') {
	useJUnitPlatform()
}
task('release'){
/* ./gradlew build를 먼저 실행하라는 뜻 */
dependsOn("build")

doLast {
def stdout = new ByteArrayOutputStream()
/* exec - 커맨드 라인 프로세서; 파워셀/터미널에서 실행하는 것과 같다.*/
exec {
/* $eb setenv SPRING_PROFILES_ACTIVE=prod*/
commandLine 'eb', 'setenv', 'SPRING_PROFILES_ACTIVE=prod'
standardOutput = stdout
}
/* 결과 로깅을 위한 작업 */
println "eb setenv SPRING_PROFILES_ACTIVE=prod :\n$stdout";
exec {
/* $eb deploy*/
commandLine 'eb', 'deploy'
standardoutput = stdout
}
println "eb deploy :\n$stdout";
println "Release succeeded."
}
}
